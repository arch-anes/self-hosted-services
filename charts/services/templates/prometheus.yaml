{{- if and (not .Values.disableAllApplications) .Values.applications.prometheus.enabled }}
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: prometheus
#   namespace: kube-system
# type: Opaque
# stringData:
#   grafana-admin-user: "someuser"
#   grafana-admin-password: "somepass"

---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: prometheus-operator-crds
  namespace: kube-system
spec:
  chart: prometheus-operator-crds
  repo: https://prometheus-community.github.io/helm-charts
  version: 23.0.0
  targetNamespace: kube-system
  bootstrap: true

---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: prometheus
  namespace: kube-system
spec:
  chart: rancher-monitoring
  repo: https://charts.rancher.io/
  version: 107.1.0
  targetNamespace: kube-system
  valuesContent: |-
    crds:
      enabled: false
    namespaceOverride: kube-system
    rancherMonitoring:
      enabled: false
    prometheus-adapter:
      prometheus:
        url: http://rancher-monitoring-prometheus.kube-system.svc
    k3sServer:
      enabled: true
      clients:
        resources:
          limits:
            memory: 64Mi
          requests:
            memory: 16Mi
            cpu: 100m
      proxy:
        resources:
          limits:
            memory: 64Mi
          requests:
            memory: 16Mi
            cpu: 100m
    prometheus-node-exporter:
      hostNetwork: false
      prometheus:
        monitor:
          relabelings:
            - sourceLabels: 
              - __meta_kubernetes_pod_node_name
              separator: ;
              regex: ^(.*)$
              targetLabel: nodename
              replacement: $1
              action: replace
          attachMetadata:
            node: true
      resources:
        limits:
          memory: 64Mi
        requests:
          memory: 16Mi
          cpu: 100m
    defaultRules:
      rules:
        windows: false
    grafana:
      annotations:
        reloader.stakater.com/auto: "true"
{{- if and (not .Values.disableAllApplications) .Values.applications.loki.enabled }}
      additionalDataSources:
        - name: Loki
          type: loki
          access: proxy
          url: http://loki.kube-system.svc.cluster.local:3100
          isDefault: false
          jsonData:
            timeout: 60
            maxLines: 1000
{{- end }}
      grafana.ini:
        auth.anonymous:
          enabled: false
      defaultDashboards:
        namespace: kube-system
        useExistingNamespace: true
      defaultDashboardsTimezone: browser
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: 'default'
              orgId: 1
              folder: ''
              type: file
              disableDeletion: false
              allowUiUpdates: true
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          app-logs:
            gnetId: 13639
            revision: 2
            datasource: Loki
          argo-cd:
            gnetId: 14584
            revision: 1
            datasource: Prometheus
          cert-manager:
            gnetId: 20340
            revision: 1
            datasource:
              - name: DS_PROMETHEUS
                value: Prometheus
          loki:
            gnetId: 14055
            revision: 5
            datasource:
              - name: DS_PROMETHEUS
                value: Prometheus
              - name: DS_LOKI
                value: Loki
          pgbackrest:
            url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/6b9bb005f171690d228bf49ca19f8f4caff95451/kustomize/monitoring/grafana/dashboards/pgbackrest.json
            datasource: Prometheus
          postgresql-pod-details:
            url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/6b9bb005f171690d228bf49ca19f8f4caff95451/kustomize/monitoring/grafana/dashboards/pod_details.json
            datasource: Prometheus
          postgresql-details:
            url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/6b9bb005f171690d228bf49ca19f8f4caff95451/kustomize/monitoring/grafana/dashboards/postgresql_details.json
            datasource: Prometheus
          postgresql-service-health:
            url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/6b9bb005f171690d228bf49ca19f8f4caff95451/kustomize/monitoring/grafana/dashboards/postgresql_service_health.json
            datasource: Prometheus
          postgresql-query-statistics:
            url: https://raw.githubusercontent.com/CrunchyData/postgres-operator-examples/6b9bb005f171690d228bf49ca19f8f4caff95451/kustomize/monitoring/grafana/dashboards/query_statistics.json
            datasource: Prometheus
          minio:
            gnetId: 13502
            revision: 26
            datasource:
              - name: DS_PROMETHEUS
                value: Prometheus
          node-exporter-full:
            gnetId: 1860
            revision: 41
            datasource: Prometheus
          node-problem-detector:
            gnetId: 15549
            revision: 1
            datasource:
              - name: DS_PROMETHEUS
                value: Prometheus
          traefik:
            gnetId: 17347
            revision: 9
            datasource: Prometheus
          redis:
            gnetId: 763
            revision: 6
            datasource:
              - name: DS_PROM
                value: Prometheus
          redis-quickstart:
            gnetId: 14091
            revision: 1
            datasource: Prometheus
          velero:
            # gnetId: 23838
            gnetId: 15469
            revision: 1
            datasource: Prometheus
      sidecar:
        dashboards:
          searchNamespace: ALL
      admin:
        existingSecret: prometheus
        userKey: grafana-admin-user
        passwordKey: grafana-admin-password
      ingress:
        enabled: true
        annotations:
          homer.service.name: Monitoring
          homer.item.name: Grafana
          homer.item.logo: "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Grafana_logo.svg/1920px-Grafana_logo.svg.png"
          traefik.ingress.kubernetes.io/router.middlewares: kube-system-intranet-allowlist@kubernetescrd
        hosts:
          - grafana.{{ .Values.fqdn }}
        tls:
          - secretName: "{{ .Values.fqdn }}-tls"
            hosts:
              - grafana.{{ .Values.fqdn }}
      persistence:
        enabled: true
        storageClassName: local-path-persistent
        accessModes:
          - ReadWriteOnce
        size: 20Gi
        finalizers:
          - kubernetes.io/pvc-protection
      nodeSelector:
        # Schedule onto amd64 to specifically avoid raspberry pi to not wear the SD card
        kubernetes.io/arch: amd64
      resources:
        limits:
          memory: 2Gi
          cpu: null
        requests:
          memory: 1Gi
          cpu: 1000m
    prometheus:
      prometheusSpec:
        podMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        replicas: 1
        retention: 365d
        podAntiAffinity: hard
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
        nodeSelector:
          # Schedule only on NAS nodes
          nas: "true"
        resources:
          limits:
            memory: 3Gi
          requests:
            cpu: 500m
            memory: 1Gi
{{- end }}
