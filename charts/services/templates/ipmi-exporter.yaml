{{- if and .Values.primaryTenant (not .Values.disableAllApplications) .Values.applications.ipmi_exporter.enabled }}
{{- if not .Values.applications.prometheus.enabled }}
{{- fail "IPMI Exporter requires Prometheus to be enabled. Please enable Prometheus in your values.yaml" }}
{{- end }}

# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: ipmi-exporter
#   namespace: kube-system
# type: Opaque
# stringData:
#   config.yml: |
#     # This is an example config for scraping remote hosts via IPMI.
#     # Information required to access remote IPMI interfaces can be supplied in the
#     # 'modules' section. A scrape can request the usage of a given config by
#     # setting the `module` URL parameter.
#     modules:
#       default:
#         # These settings are used if no module is specified, the
#         # specified module doesn't exist, or of course if
#         # module=default is specified.
#         user: "default_user"
#         pass: "example_pw"
#         # The below settings correspond to driver-type, privilege-level, and
#         # session-timeout respectively, see `man 5 freeipmi.conf` (and e.g.
#         # `man 8 ipmi-sensors` for a list of driver types).
#         driver: "LAN_2_0"
#         privilege: "user"
#         # The session timeout is in milliseconds. Note that a scrape can take up
#         # to (session-timeout * #-of-collectors) milliseconds, so set the scrape
#         # timeout in Prometheus accordingly.
#         # Must be larger than the retransmission timeout, which defaults to 1000.
#         timeout: 10000
#         # Available collectors are bmc, ipmi, chassis, dcmi, sel, and sm-lan-mode
#         # If _not_ specified, bmc, ipmi, chassis, and dcmi are used
#         collectors:
#           - bmc
#           - ipmi
#           - chassis
#         # Got any sensors you don't care about? Add them here.
#         exclude_sensor_ids:
#           - 2
#           - 29
#           - 32
#           - 50
#           - 52
#           - 55
#       dcmi:
#         # Use these settings when scraped with module=dcmi.
#         user: "admin_user"
#         pass: "another_pw"
#         privilege: "admin"
#         driver: "LAN_2_0"
#         collectors:
#           - dcmi
#       thatspecialhost:
#         # Use these settings when scraped with module=thatspecialhost.
#         user: "some_user"
#         pass: "secret_pw"
#         privilege: "admin"
#         driver: "LAN"
#         collectors:
#           - ipmi
#           - sel
#         # Need any special workaround flags set? Add them here.
#         # Workaround flags might be needed to address issues with specific vendor implementations
#         # e.g. https://www.gnu.org/software/freeipmi/freeipmi-faq.html#Why-is-the-output-from-FreeIPMI-different-than-another-software_003f
#         # For a full list of flags, refer to:
#         # https://www.gnu.org/software/freeipmi/manpages/man8/ipmi-sensors.8.html#lbAL
#         workaround_flags:
#           - discretereading
#         # If you require additional command line arguments (e.g. --bridge-sensors for ipmimonitoring),
#         # you can specify them per collector - BE CAREFUL, you can easily break the exporter with this!
#         custom_args:
#           ipmi:
#             - "--bridge-sensors"
#       advanced:
#         # Use these settings when scraped with module=advanced.
#         user: "some_user"
#         pass: "secret_pw"
#         privilege: "admin"
#         driver: "LAN"
#         collectors:
#           - ipmi
#           - sel
#         # USING ANY OF THE BELOW VOIDS YOUR WARRANTY! YOU MAY GET BITTEN BY SHARKS!
#         # You can override the command to be executed for a collector. Paired with
#         # custom_args, this can be used to e.g. execute the IPMI tools with sudo:
#         collector_cmd:
#           ipmi: sudo
#           sel: sudo
#         custom_args:
#           ipmi:
#             - "ipmimonitoring"
#           sel:
#             - "ipmi-sel"
#   targets.yml: |
#     ---
#     - targets:
#         - 10.1.2.23
#         - 10.1.2.24
#         - 10.1.2.25
#         - 10.1.2.26
#         - 10.1.2.27
#         - 10.1.2.28
#         - 10.1.2.29
#         - 10.1.2.30
#       labels:
#         job: ipmi_exporter

---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: ipmi-exporter
  namespace: kube-system
spec:
  chart: prometheus-ipmi-exporter
  repo: https://prometheus-community.github.io/helm-charts
  version: 0.7.0
  targetNamespace: kube-system
  valuesContent: |-
    image:
      repository: ghcr.io/arch-anes/ipmi-exporter-linux-amd64
      tag: "master"
    additionalAnnotations:
      reloader.stakater.com/auto: "true"
    configSecret:
      enabled: true
      name: ipmi-exporter
      key: config.yml
    resources:
      limits:
        cpu: 1000m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    scrapeConfig:
      enabled: true
      mode: remote
      fileSDConfigs:
        - files:
            - /etc/prometheus/secrets/ipmi-exporter/targets.yml
          refreshInterval: 5m
{{- end }}
