{{- if and (not .Values.disableAllApplications) .Values.applications.torrent_client.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: transmission
  namespace: default
spec:
  ports:
    - protocol: TCP
      name: transmission
      port: 9091
  selector:
    app: torrent-client

---
apiVersion: v1
kind: Service
metadata:
  name: joal
  namespace: default
spec:
  ports:
    - protocol: TCP
      name: joal
      port: 12345
  selector:
    app: torrent-client


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: transmission
  namespace: default
  annotations:
    homer.service.name: Media
    homer.item.logo: "https://raw.githubusercontent.com/transmission/transmission/0ce4adf07ce4b6cfabf81e2d027f96197bb9a305/web/assets/img/logo.png"
spec:
  tls:
    - hosts:
        - transmission.{{ .Values.fqdn }}
      secretName: "{{ .Values.fqdn }}-tls"
  rules:
    - host: transmission.{{ .Values.fqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: transmission
                port:
                  name: transmission

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: joal
  namespace: default
  annotations:
    homer.service.name: Media
    homer.item.logo: "https://raw.githubusercontent.com/anthonyraymond/joal/cad5df11990d4304476d574484003ccbcdd0b700/src/main/resources/public/favicon.ico"
spec:
  tls:
    - hosts:
        - joal.{{ .Values.fqdn }}
      secretName: "{{ .Values.fqdn }}-tls"
  rules:
    - host: joal.{{ .Values.fqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: joal
                port:
                  name: joal

---
apiVersion: v1
kind: Secret
metadata:
  name: gluetun
  namespace: default
type: Opaque
# stringData:
#   vpn_service_provider: "someprovider" # https://github.com/qdm12/gluetun-wiki/tree/main/setup/providers
#   wireguard_private_key: "somekey"
#   server_countries: "somecountry1,somecountry2"

---
apiVersion: v1
kind: Secret
metadata:
  name: transmission
  namespace: default
type: Opaque
# stringData:
#   username: "someuser"
#   password: "somepass"

---
apiVersion: v1
kind: Secret
metadata:
  name: joal
  namespace: default
type: Opaque
# stringData:
#   token: "somepass"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: transmission
  namespace: default
spec:
  storageClassName: "local-path-retain"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: joal
  namespace: default
spec:
  storageClassName: "local-path-retain"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: transmission-scripts
  namespace: default
data:
  extract-files.sh: |
    #!/bin/bash

    # Transmission completion script for automatic extraction

    find "${TR_TORRENT_DIR}" -type f \( -iname "*.rar" -o -iname "*.zip" -o -iname "*.7z" \) | while read -r file; do
        file_dir=$(dirname "${file}")
        case "${file,,}" in
            *.rar)
                unrar x -o- "${file}" "${file_dir}" &>/dev/null
                ;;
            *.zip)
                unzip -o "${file}" -d "${file_dir}" &>/dev/null
                ;;
            *.7z)
                7z x -aoa "${file}" -o"${file_dir}" &>/dev/null
                ;;
        esac
    done
  stuck-download-cleaner.sh: |
    #!/bin/bash
    set -euo pipefail

    TRANSMISSION_COMMAND="transmission-remote -n $USER:$PASS"

    STATE_DIR="/tmp/transmission_stuck_tracker"
    mkdir -p "$STATE_DIR"

    THRESHOLD_MINUTES=60

    TORRENTS=$($TRANSMISSION_COMMAND -l | tail -n +2 | head -n -1)

    echo "$TORRENTS" | while read -r line; do
      id=$(echo "$line" | awk '{print $1}')
      [[ -z "$id" ]] && continue

      percent=$(echo "$line" | awk '{print $2}' | tr -d '%')
      status=$(echo "$line" | awk '{print $9}')
      rate=$(echo "$line" | awk '{print $(NF-2)}')

      timestamp_file="$STATE_DIR/$id"
      if [[ "$percent" == "100" ]] || [[ "$status" =~ ^(Idle|Seeding|Queued|Stopped)$ ]]; then
        rm -f "$timestamp_file"
        continue
      fi

      rate_num=$(echo "$rate" | grep -oE '^[0-9.]+' || echo "0")

      if [[ "$rate_num" != "0" && "$rate_num" != "0.0" ]]; then
        rm -f "$timestamp_file"
        continue
      fi

      now=$(date +%s)
      if [[ ! -f "$timestamp_file" ]]; then
        echo "$now" > "$timestamp_file"
        continue
      fi

      last_time=$(cat "$timestamp_file")
      elapsed=$(( (now - last_time) / 60 ))

      if (( elapsed >= THRESHOLD_MINUTES )); then
        echo "[INFO] Removing stuck torrent ID $id (stuck for $elapsed minutes)..."
        $TRANSMISSION_COMMAND -t "$id" --remove
        rm -f "$timestamp_file"
      fi
    done

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: torrent-client
  namespace: default
  labels:
    app: torrent-client
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: torrent-client
  template:
    metadata:
      labels:
        app: torrent-client
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - jellyfin
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: vpn
          image: qmcgaw/gluetun:v3.39.1
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
          resources:
            requests:
              memory: 512Mi
              cpu: 1000m
            limits:
              memory: 1Gi
          env:
            - name: UPDATER_PERIOD
              value: "24h"
            - name: VPN_TYPE
              value: "wireguard"
            - name: VPN_SERVICE_PROVIDER
              valueFrom:
                secretKeyRef:
                  name: gluetun
                  key: vpn_service_provider
            - name: WIREGUARD_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: gluetun
                  key: wireguard_private_key
            - name: SERVER_COUNTRIES
              valueFrom:
                secretKeyRef:
                  name: gluetun
                  key: server_countries
        - name: transmission
          image: lscr.io/linuxserver/transmission:4.0.6
          resources:
            requests:
              memory: 128Mi
              cpu: 1000m
            limits:
              memory: 2Gi
          ports:
            - name: transmission
              containerPort: 9091
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: transmission
                  key: username
            - name: PASS
              valueFrom:
                secretKeyRef:
                  name: transmission
                  key: password
          volumeMounts:
            - name: downloads
              mountPath: /downloads
            - name: transmission-config
              mountPath: /config
            - name: transmission-scripts
              mountPath: /scripts/extract-files.sh
              subPath: extract-files.sh
            - name: transmission-scripts
              mountPath: /etc/periodic/15min/stuck-download-cleaner.sh
              subPath: stuck-download-cleaner.sh
        - name: joal
          image: anthonyraymond/joal:2.1.36
          command: ["bash"]
          args: ["-c", "java -jar /joal/joal.jar --server.port=12345 --joal-conf=/data --spring.main.web-environment=true --joal.ui.path.prefix=app --joal.ui.secret-token=$$SECRET_TOKEN"]
          resources:
            requests:
              memory: 128Mi
              cpu: 250m
            limits:
              memory: 1Gi
          ports:
            - name: joal
              containerPort: 12345
          env:
            - name: SECRET_TOKEN
              valueFrom:
                secretKeyRef:
                  name: joal
                  key: token
          volumeMounts:
            - name: joal-config
              mountPath: /data
      volumes:
        - name: downloads
          hostPath:
            path: "{{ .Values.storageLocation }}/Multimedia/Downloads"
        - name: transmission-config
          persistentVolumeClaim:
            claimName: transmission
        - name: transmission-scripts
          configMap:
            name: transmission-scripts
            defaultMode: 0755
        - name: joal-config
          persistentVolumeClaim:
            claimName: joal
{{- end }}
