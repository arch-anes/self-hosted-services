{{- if and (not .Values.disableAllApplications) .Values.applications.octoprint.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: octoprint
  namespace: default
spec:
  ports:
    - protocol: TCP
      name: web
      port: 5000
    - protocol: TCP
      name: webcam
      port: 8080
  selector:
    app: octoprint

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: octoprint-webcam
  namespace: default
  annotations:
    homer.item.excluded: "true"
    traefik.ingress.kubernetes.io/router.middlewares: kube-system-cluster-admin-authentication@kubernetescrd
spec:
  tls:
    - hosts:
        - octoprint-webcam.{{ .Values.fqdn }}
      secretName: "{{ .Values.fqdn }}-tls"
  rules:
    - host: octoprint-webcam.{{ .Values.fqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: octoprint
                port:
                  name: webcam

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: octoprint
  namespace: default
spec:
  storageClassName: "local-path-retain"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: octoprint
  namespace: default
  annotations:
    homer.service.name: Automation
    homer.item.logo: "https://raw.githubusercontent.com/OctoPrint/OctoPrint/a93b4d397248dc406a75e634c1326fb1b8ddcb63/docs/images/octoprint-logo.png"
spec:
  tls:
    - hosts:
        - octoprint.{{ .Values.fqdn }}
      secretName: "{{ .Values.fqdn }}-tls"
  rules:
    - host: octoprint.{{ .Values.fqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: octoprint
                port:
                  name: web

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: octoprint
  namespace: default
  labels:
    app: octoprint
spec:
  replicas: 1
  strategy:
    # This is done to ensure devices are freed before creating new container
    # otherwise deployment is pending
    type: Recreate
  selector:
    matchLabels:
      app: octoprint
  template:
    metadata:
      labels:
        app: octoprint
    spec:
      containers:
        - name: app
          image: octoprint/octoprint:1.10.3
          resources:
            requests:
              memory: 512Mi
              cpu: 2000m
            limits:
            {{- if and (not .Values.disableAllApplications) .Values.applications.akri.enabled }}
              akri.sh/akri-udev-4ad410: "1"
              akri.sh/akri-udev-dbf9ff: "1"
            {{- end }}
              memory: 2Gi
          ports:
            - name: web
              containerPort: 5000
            - name: webcam
              containerPort: 8080
          env:
            - name: ENABLE_MJPG_STREAMER
              value: "true"
            - name: MJPG_STREAMER_INPUT
              value: "-fps 30 -r 1920x1080"
            - name: OCTOPRINT_PORT
              value: "5000"
          volumeMounts:
            - name: octoprint
              mountPath: /octoprint
      volumes:
        - name: octoprint
          persistentVolumeClaim:
            claimName: octoprint
{{- end }}
