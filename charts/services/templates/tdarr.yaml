{{- if and (not .Values.disableAllApplications) .Values.applications.tdarr.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: tdarr
  namespace: default
spec:
  ports:
    - protocol: TCP
      name: web
      port: 8265
    - protocol: TCP
      name: server
      port: 8266
  selector:
    app: tdarr

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tdarr
  namespace: default
  annotations:
    homer.service.name: Arr
    homer.item.logo: "https://home.tdarr.io/static/media/logo3-min.246d6df44c7f16ddebaf.png"
spec:
  tls:
    - hosts:
        - tdarr.{{ .Values.fqdn }}
      secretName: "{{ .Values.fqdn }}-tls"
  rules:
    - host: tdarr.{{ .Values.fqdn }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: tdarr
                port:
                  name: web

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tdarr
  namespace: default
  labels:
    app: tdarr
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tdarr
  template:
    metadata:
      labels:
        app: tdarr
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - jellyfin
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: app
          image: ghcr.io/haveagitgat/tdarr:2.45.01
          resources:
            requests:
              memory: 256Mi
              cpu: 250m
            limits:
              memory: 1Gi
          ports:
            - name: web
              containerPort: 8265
            - name: server
              containerPort: 8266
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: serverIP
              value: "0.0.0.0"
            - name: serverPort
              value: "8266"
            - name: webUIPort
              value: "8265"
            - name: internalNode
              value: "false"
            - name: inContainer
              value: "true"
            - name: auth
              value: "true"
            - name: ffmpegVersion
              value: "6"
          volumeMounts:
            - name: server
              mountPath: /app/server
            - name: config
              mountPath: /app/configs
            - name: logs
              mountPath: /app/logs
            - name: cache
              mountPath: /temp
            - name: media
              mountPath: /media
      volumes:
        - name: server
          hostPath:
            path: "{{ .Values.storageLocation }}/tdarr/server"
        - name: config
          hostPath:
            path: "{{ .Values.storageLocation }}/tdarr/config"
        - name: logs
          hostPath:
            path: "{{ .Values.storageLocation }}/tdarr/logs"
        - name: cache
          hostPath:
            path: "{{ .Values.storageLocation }}/Multimedia/transcoding-cache"
        - name: media
          hostPath:
            path: "{{ .Values.storageLocation }}/Multimedia"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tdarr-worker
  namespace: default
  labels:
    app: tdarr-worker
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tdarr-worker
  template:
    metadata:
      labels:
        app: tdarr-worker
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - jellyfin
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: app
          image: ghcr.io/haveagitgat/tdarr_node:2.45.01
          resources:
            requests:
              memory: 256Mi
              cpu: 250m
            limits:
              memory: 2Gi
              {{- $gpuVendor := .Values.applications.tdarr.gpu_vendor }}
              {{- if eq $gpuVendor "intel" }}
                {{- if not .Values.applications.intel_gpu.enabled }}
                  {{- fail "Intel GPU is selected for Tdarr but intel_gpu is not enabled" }}
                {{- end }}
              gpu.intel.com/i915: 1
              {{- else if eq $gpuVendor "nvidia" }}
                {{- if not .Values.applications.nvidia_gpu.enabled }}
                  {{- fail "NVIDIA GPU is selected for Tdarr but nvidia_gpu is not enabled" }}
                {{- end }}
              nvidia.com/gpu: 1
              {{- else if eq $gpuVendor "amd" }}
                {{- if not .Values.applications.amd_gpu.enabled }}
                  {{- fail "AMD GPU is selected for Tdarr but amd_gpu is not enabled" }}
                {{- end }}
              amd.com/gpu: 1
              {{- else if $gpuVendor }}
                {{- fail (printf "Unknown GPU vendor '%s' selected for Tdarr" $gpuVendor) }}
              {{- end }}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: serverIP
              value: "tdarr"
            - name: serverPort
              value: "8266"
            - name: inContainer
              value: "true"
            - name: ffmpegVersion
              value: "6"
            - name: nodeName
              value: "PrincipalNode"
            - name: apiKey
              valueFrom:
                secretKeyRef:
                  name: arr
                  key: tdarr_api_key
          volumeMounts:
            - name: config
              mountPath: /app/configs
            - name: logs
              mountPath: /app/logs
            - name: cache
              mountPath: /temp
            - name: media
              mountPath: /media
      volumes:
        - name: config
          hostPath:
            path: "{{ .Values.storageLocation }}/tdarr/config"
        - name: logs
          hostPath:
            path: "{{ .Values.storageLocation }}/tdarr/logs"
        - name: cache
          hostPath:
            path: "{{ .Values.storageLocation }}/Multimedia/transcoding-cache"
        - name: media
          hostPath:
            path: "{{ .Values.storageLocation }}/Multimedia"
{{- end }}
