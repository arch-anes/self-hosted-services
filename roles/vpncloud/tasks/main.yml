- name: Setup firewall
  import_role:
    name: weareinteractive.ufw
  vars:
    ufw_rules:
      - { to_port: "3210:3214", proto: udp, rule: allow, comment: "VPNCloud (5 static peers)" }
  become: yes

- name: Generate random password for VPN connection
  set_fact:
    vpn_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits') }}"
  run_once: true

- name: Get host public IP
  ipify_facts:

- name: Retain current private IP address
  set_fact:
    listen_vpn_port: "{{vpn_port | default(3210)}}"
    private_ip: "{{ (vpn_ip | default(ansible_vpncloud0.ipv4.address)) | default() }}"

- name: Find new private IP address
  block:
    - command: "{{role_path}}/find_available_ips.py -n {{ansible_play_hosts|length}} --taken_ips {{hostvars | json_query('*.private_ip') | quote}}"
      delegate_to: localhost
      register: available_private_ips
      run_once: true

    - set_fact:
        private_ip: "{{(available_private_ips.stdout | from_json).ips[ansible_play_hosts_all.index(inventory_hostname)]}}"

  when: "private_ip == ''"

- name: Set peer list
  set_fact:
    peers: "{{ peers | default('') + ' -c ' + hostvars[item]['ipify_public_ip'] + ':' + hostvars[item]['listen_vpn_port'] }}"
  loop: "{{ ansible_play_hosts }}"

- name: Create systemd service
  template:
    src: vpncloud.service.j2
    dest: /usr/lib/systemd/system/vpncloud.service
  become: yes

- name: Start systemd service
  systemd:
    name: vpncloud
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: yes
